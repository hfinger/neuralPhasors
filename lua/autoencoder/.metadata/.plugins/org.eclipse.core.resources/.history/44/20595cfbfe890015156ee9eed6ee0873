require 'unsup';
require 'nn';
require 'gnuplot';
require 'Encoder';
require 'Decoder';
require 'nngraph';
require 'image';
require 'optim';
require 'functions'
require 'image'

--load Data
traindata, testdata = loadData{normalizeMean = false} 

n_hidden = 50
n_input = 32*32
batchsize = 128
config = {learningRate = 0.01,
         weightDecay = 5e-5,
         momentum = 0,
         learningRateDecay = 5e-7}
         
--initialize Encode
enc = nn.Encoder(1,50,7)
dec = nn.Decoder(50,1,7)


autoencoder = nn.Sequential()
autoencoder:add(enc)
autoencoder:add(dec)

--set Criterion 
criterion = nn.ParallelCriterion()

xcrit = nn.MSECriterion() --compare x_in and x_out
ycrit = nn.MSECriterion() --compare y_in and y_out

criterion:add(xcrit,0.5)
criterion:add(ycrit,0.5)

parameters, gradParameters = autoencoder:getParameters()

trainModel(5000, 128, traindata, autoencoder, criterion, parameters, gradParameters, config, false)
print('finished training - save model')
torch.save('model.net',autoencoder)




