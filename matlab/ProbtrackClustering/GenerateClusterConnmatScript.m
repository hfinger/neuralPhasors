% prompt = {'Enter Weighing Factor range:',...
%     'Enter subject range:',...
%     'Enter clustering range:',...
%     'Enter Decay Parameter:',...
%     'Do you want to use Cosine Similarity("true" or "false")?',...
%     'Calculate for Recursive Split("true" or "false")?',...
%     'Enter individual normalisation factor("sum" or "mean")',...
%     'Enter whole normalisation("WholeMax")',...
%     'Enter CompSimPath:',...
%     'Enter GraclusPath:',...
%     'Enter PostProcessing Path',...
%     'Enter Thresholding Factor Search Range'};
% dlg_title = 'Input';
% num_lines = 1;
% defaultans = {'(0)',...
%     '[1]',...
%     '(2:1000)',...
%     '-1', ...
%     'true',...
%     'true',...
%     'sum',...
%     'WholeMax',...
%     '/net/store/nbp/projects/phasesim/workdir/Arushi/20160418_CompSimMatCalcNewSub/',...
%     '/net/store/nbp/projects/phasesim/workdir/Arushi/NewData/20160709_GraclusCut/',...
%     '/net/store/nbp/projects/phasesim/workdir/Arushi/NewData/20160709_ClusteringPostprocessing/',...
%     '1'};
% answer = inputdlg(prompt,dlg_title,num_lines,defaultans);

answer = {'(0:0.1:1)',...
    '[1]',...
    '(2:1000)',...
    '-1', ...
    'falsecd',...
    'true',...
    'sum',...
    'WholeMax',...
    '/net/store/nbp/projects/phasesim/workdir/Arushi/20160418_CompSimMatCalcNewSub/',...
    '/net/store/nbp/projects/phasesim/workdir/Arushi/NewData/20160709_GraclusCut/',...
    '/net/store/nbp/projects/phasesim/workdir/Arushi/NewData/20160709_ClusteringPostprocessing/',...
    '1'};


if ~isempty(answer)
    WeighFacRange = str2num(answer{1});
    subjRange     = str2num(answer{2});
    clustRange    = str2num(answer{3});
    decayParam    = str2num(answer{4});
    useCosineSim  = str2num(answer{5});
    recursiveSplit = str2num(answer{6});
    normBy         = answer{7};
    WholeNormText  = answer{8};
    CompSimPath    = answer{9};
    GraclusPath    = answer{10};
    PostProcessPath = answer{11};
    threshRange    = str2num(answer{12});
    
    if useCosineSim
        cosText = 'cos';
    else
        cosText = 'conn';
    end
    if recursiveSplit
        splitType = 'Rec';
    else
        splitType = 'NonRec';
    end
    for subjNum = subjRange
        for WeighingFactor = WeighFacRange
            disp(['subj' num2str(subjNum) 'weigh' num2str(WeighingFactor)]);
            
            InputGraclusPath = [GraclusPath cosText '/' splitType '/decay'...
                num2str(decayParam) 'weigh' num2str(WeighingFactor) '/'...
                num2str(subjNum) '/normby' normBy 'thresh' ];
            
                      
            switch splitType
                case 'Rec'
                    
                    clusterPath = [InputGraclusPath  '1/graclusResultClust1000.mat' ];
                    if ~exist(clusterPath, 'file')
                        clusterPath = [InputGraclusPath   '1/graclusResultClust.mat' ];
                        if ~exist(clusterPath, 'file')
                         clusterPath = [InputGraclusPath  '1/graclusResultClust'...
                                        num2str(clustRange(end)) '.mat' ];
                        end

                    end
                case 'NonRec'
                    clusterPath = [InputGraclusPath  '1/graclusResultClustcollected.mat' ];
            end
            CoordPath = [CompSimPath 'FinalCoord/' 'FinalCoord' num2str(subjNum)];
            
                    SPath = [CompSimPath 'SSymDiag0/SSymDiag0subj' num2str(subjNum)];
            
            
            OutputPath = [PostProcessPath splitType '/decay' num2str(decayParam)...
                'weigh' num2str(WeighingFactor) '/normby' normBy 'thresh1'...
              '/' cosText '/' 'Subj'...
                num2str(subjNum) '/'];
            
            GenerateClusterConnmat(clustRange, clusterPath, CoordPath, SPath, recursiveSplit, OutputPath)
        end
    end
end
